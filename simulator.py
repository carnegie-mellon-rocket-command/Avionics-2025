import time, serial

# IK this is dumb, but its an alternative to requiring everyone to install the XLSX reading library
# Each measurement is spaced 0.05 seconds apart; this is from subscale, so the max altitude is different
altitude_data_2024 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, -1, 2, 2, 5, 8, 11, 13, 17, 23, 27, 32, 39, 45, 54, 63, 72, 81, 89, 98, 110, 130, 141, 149, 162, 176, 188, 202, 215, 231, 247, 264, 279, 294, 310, 323, 337, 351, 366, 380, 396, 410, 424, 440, 452, 467, 483, 496, 509, 522, 535, 549, 561, 574, 588, 599, 612, 625, 638, 648, 662, 673, 686, 699, 710, 721, 734, 745, 757, 768, 780, 790, 800, 812, 823, 833, 844, 855, 865, 875, 886, 895, 904, 916, 925, 934, 943, 954, 964, 973, 982, 991, 999, 1008, 1018, 1025, 1034, 1043, 1052, 1060, 1068, 1077, 1085, 1093, 1100, 1109, 1116, 1125, 1131, 1139, 1146, 1154, 1161, 1167, 1175, 1182, 1189, 1193, 1201, 1209, 1215, 1221, 1228, 1234, 1240, 1247, 1252, 1259, 1263, 1269, 1276, 1281, 1286, 1292, 1298, 1302, 1308, 1312, 1317, 1322, 1327, 1330, 1336, 1341, 1345, 1349, 1354, 1359, 1361, 1366, 1370, 1373, 1378, 1382, 1386, 1391, 1394, 1396, 1399, 1402, 1405, 1408, 1411, 1415, 1418, 1420, 1424, 1426, 1428, 1432, 1432, 1436, 1437, 1440, 1442, 1442, 1446, 1447, 1449, 1451, 1453, 1454, 1455, 1457, 1458, 1460, 1461, 1462, 1463, 1463, 1465, 1464, 1464, 1465, 1466, 949, 1488, 1475, 1474, 1471, 1472, 1471, 1472, 1465, 1478, 1480, 1484, 1486, 1483, 1482, 1481, 1476, 1473, 1473, 1472, 1471, 1472, 1473, 1471, 1472, 1470, 1465, 1459, 1457, 1457, 1460, 1472, 1475, 1451, 1443, 1438, 1435, 1442, 1446, 1443, 1436, 1430, 1430, 1426, 1430, 1438, 1437, 1428, 1423, 1421, 1421, 1419, 1415, 1412, 1412, 1416, 1415, 1411, 1412, 1410, 1410, 1411, 1412, 1411, 1408, 1400, 1396, 1397, 1397, 1398, 1395, 1390, 1387, 1381, 1374, 1373, 1378, 1382, 1376, 1370, 1366, 1362, 1357, 1355, 1352, 1350, 1345, 1343, 1342, 1340, 1338, 1341, 1340, 1338, 1336, 1332, 1330, 1332, 1329, 1329, 1332, 1330, 1322, 1308, 1300, 1296, 1299, 1298, 1291, 1287, 1288, 1290, 1289, 1290, 1291, 1283, 1285, 1282, 1277, 1275, 1272, 1267, 1263, 1265, 1266, 1267, 1267, 1263, 1253, 1250, 1244, 1241, 1240, 1236, 1237, 1231, 1232, 1227, 1223, 1221, 1220, 1220, 1221, 1216, 1213, 1212, 1212, 1208, 1206, 1202, 1200, 1201, 1196, 1194, 1193, 1193, 1190, 1184, 1177, 1180, 1177, 1178, 1175, 1171, 1166, 1163, 1161, 1157, 1156, 1152, 1149, 1147, 1147, 1147, 1144, 1142, 1140, 1134, 1133, 1132, 1130, 1128, 1124, 1124, 1119, 1117, 1113, 1116, 1112, 1112, 1105, 1095, 1098, 1099, 1104, 1097, 1094, 1086, 1084, 1081, 1075, 1072, 1068, 1065, 1065, 1062, 1061, 1060, 1057, 1054, 1051, 1048, 1047, 1044, 1044, 1042, 1038, 1032, 1028, 1024, 1019, 1019, 1023, 1025, 1029, 1027, 1017, 1010, 1005, 1006, 1003, 1002, 1006, 1009, 1008, 999, 995, 989, 988, 987, 984, 979, 986, 980, 974, 971, 969, 972, 971, 963, 958, 956, 953, 955, 950, 949, 947, 948, 941, 940, 940, 937, 930, 929, 929, 927, 931, 927, 930, 931, 923, 927, 912, 900, 899, 902, 901, 902, 897, 894, 892, 890, 886, 880, 879, 878, 877, 872, 871, 869, 869, 868, 868, 865, 864, 862, 861, 860, 857, 850, 846, 844, 842, 836, 830, 829, 825, 821, 821, 821, 820, 817, 813, 811, 810, 812, 814, 813, 811, 809, 804, 805, 803, 802, 800, 798, 793, 796, 797, 793, 782, 777, 771, 769, 769, 766, 762, 765, 762, 763, 756, 754, 753, 751, 749, 749, 747, 746, 744, 744, 742, 740, 737, 728, 723, 724, 723, 724, 724, 716, 715, 717, 711, 704, 702, 703, 710, 705, 705, 699, 698, 696, 701, 702, 695, 688, 683, 681, 677, 675, 673, 669, 670, 666, 664, 662, 658, 659, 655, 653, 650, 651, 650, 642, 645, 642, 644, 643, 640, 638, 640, 633, 628, 622, 616, 616, 613, 611, 614, 612, 612, 611, 607, 607, 604, 602, 601, 598, 599, 599, 595, 591, 579, 577, 577, 578, 576, 572, 568, 566, 570, 565, 564, 561, 558, 566, 556, 555, 553, 544, 109, 546, 548, 540, 544, 545, 543, 541, 539, 538, 531, 528, 527, 527, 525, 523, 519, 507, 503, 497, 496, 503, 502, 500, 496, 492, 491, 488, 487, 486, 483, 478, 473, 471, 470, 469, 470, 470, 467, 465, 461, 458, 456, 455, 452, 456, 448, 454, 444, 440, 433, 428, 428, 424, 423, 424, 430, 429, 428, 424, 421, 421, 425, 415, 409, 406, 405, 402, 399, 400, 395, 393, 390, 388, 385, 382, 390, 389, 384, 380, 381, 379, 374, 371, 364, 359, 364, 365, 368, 364, 361, 358, 352, 345, 341, 337, 333, 332, 331, 335, 337, 332, 329, 322, 318, 324, 316, 312, 309, 306, 305, 301, 299, 301, 296, 295, 292, 292, 291, 291, 291, 293, 290, 291, 287, 283, 273, 269, 263, 261, 263, 262, 258, 256, 253, 251, 244, 243, 243, 239, 232, 228, 226, 222, 226, 224, 221, 218, 217, 215, 212, 209, 203, 198, 196, 194, 191, 189, 190, 189, 186, 187, 183, 180, 177, 170, 167, 162, 159, 157, 155, 154, 153, 151, 149, 147, 143, 141, 137, 132, 128, 129, 122, 121, 121, 117, 117, 115, 113, 111, 105, 102, 100, 97, 97, 95, 92, 92, 87, 83, 78, 74, 70, 69, 64, 65, 61, 57, 57, 54, 49, 44, 42, 46, 40, 41, 42, 38, 31, 21, 20, 19, 21, 21, 24, 25, 19, 13, 11, 2, -1, -23, -7, -9, -10, -11, -10, -9, -10, -10, -10, -11, -11, -10, -10, -10, -11, -11, -10, -10, -10, -12, -10, -10, -10, -10, -10, -12, -10, -10, -10, -12, -10, -11, -10, -12, -10, -11, -11, -10, -10, -9, -10, -10, -11, -10, -10, -10, -10, -10, -10, -10, -10, -9, -11, -12, -10, -11, -10, -10, -10, -11, -9, -10, -10, -11, -11, -11, -11, -10, -10, -10, -11, -11, -11, -11, -10, -10, -10, -10, -11, -11, -10, -11, -11, -10, -10, -10, -10, -10, -11, -12, -10, -9, -11, -11, -11, -9, -11, -11, -10, -10, -9, -10, -10, -11, -11, -10, -11, -11, -10, -11, -10, -9, -10, -11, -11, -9, -10, -10, -9, -9, -11, -10, -10, -11, -10, -10, -10, -10, -10, -10, -10, -10, -9, -8, -10, -10, -10, -10, -10, -12, -11, -11, -11, -11, -10, -10, -11, -9, -11, -9, -9, -10, -10, -11, -12, -10, -10, -10, -10, -10, -10, -10, -9, -10, -12, -10, -9, -10, -11, -10, -12, -10, -11, -9, -10, -10, -10, -11, -10, -10, -11, -10, -10, -10, -10]
velocity_data
acceleration_data_2024 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -140, 120, -140, 260, 140, 180, 180, 220, 180, 180, 200, 200, 200, 240, 260, 280, 280, 240, 220, 220, 220, 280, 320, 300, 180, 120, 60, 20, 80, 180, 200, 240, 220, 140, 80, -20, -80, -120, -100, -60, -20, 20, 40, 0, 0, -20, -40, -20, -60, -80, -80, -100, -80, -60, -60, -40, -40, -40, -40, -40, -40, -20, -40, -20, -20, -20, -40, -40, -40, -40, -60, -60, -60, -60, -60, -40, -20, -20, -20, -40, -60, -40, -60, -60, -40, -40, -40, -20, -20, -20, -20, -40, -60, -80, -60, -60, -40, -20, 0, -20, -20, -20, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -60, -20, -20, -20, 0, -20, -40, -40, -40, -40, -40, -60, -40, -20, -40, -20, 0, -40, -40, -60, -60, -60, -40, -40, -20, -20, 0, -20, -20, -20, -40, -60, -40, -40, -40, 0, 20, 0, -20, -40, -100, -80, -100, -60, -20, 0, 20, 20, -20, -20, -40, -40, -60, -60, -40, -40, -40, -20, -40, -20, -20, -20, 0, -20, -40, -40, -40, -40, -20, -20, -20, -40, -60, -80, -60, -60, 80, 140, 180, 200, 0, -180, -280, -360, -260, 0, 140, 340, 360, 240, 80, -140, -340, -400, -380, -280, -100, 20, 140, 0, -40, -120, -160, 80, 120, 140, 160, -20, -40, -60, -60, -60, -20, -20, 0, 0, 40, 0, 20, 0, 0, 0, 0, 0, -20, 0, 0, 0, 0, -20, -20, -40, 0, 20, 20, 20, 0, 0, 0, 0, -20, 0, -20, -40, -40, -40, -20, 0, 0, 20, 0, 20, 20, 0, 0, -20, -20, 0, 0, 0, -20, 0, -40, -40, -40, -40, -20, -20, 0, -20, 0, 40, 40, 20, 40, 0, -20, 0, -20, 0, 20, 0, 20, 20, 20, 20, 20, 20, -20, -40, -40, -40, -20, -20, 0, 0, -20, -20, -20, -20, 0, 20, 40, 60, 40, 40, 20, 0, 0, -20, 0, -20, -20, -20, -20, 20, -20, 0, 0, 0, 20, 0, 0, 0, -40, -20, -20, 0, 20, 20, 20, 20, 0, 20, 0, 0, 20, 0, 0, -20, 0, 0, -20, 0, 0, 0, -20, 20, 0, 0, -20, 0, -20, 0, 20, 20, 0, 0, -20, -20, -20, -20, -20, 0, 0, 20, 20, 0, 20, 0, 0, -20, 0, -20, 0, 0, 0, 0, -20, -20, -20, 0, 20, 40, 40, 20, 0, -20, -40, 0, 0, 20, 20, 20, 0, 0, 0, 20, 0, 0, 20, 20, 20, 0, 0, -20, 0, 0, 0, 0, 0, 0, -20, 0, 0, 0, 20, 20, 20, 20, 0, -20, -40, -40, -20, 20, 40, 40, 40, 20, 0, -40, -40, -60, -40, 0, 20, 20, 20, 0, 0, -20, 0, -20, 0, 0, 0, 0, 0, 20, 20, 20, 20, 0, 0, 0, 0, 20, -20, 0, -20, 0, -20, -20, -20, -40, -20, -40, -20, 0, 20, 20, 60, 20, 20, 20, 20, 0, 20, 20, 0, 20, 20, 0, 20, 0, 0, 20, 0, -20, -20, -40, -40, -40, -20, 0, 0, 0, 20, 20, 20, 20, 20, 0, 20, 40, 0, 20, 0, 0, 0, 0, 0, -20, -40, -40, -20, 0, 0, 0, 0, 0, -20, -20, 0, 0, 0, 20, 20, 20, 40, 40, 40, 20, 0, 0, -40, -20, -20, -20, 0, 0, 0, 0, -20, 0, -20, 0, -20, 0, 0, 20, 20, 20, 0, 20, 0, 0, 0, 20, 0, 0, 0, -20, -20, -40, -40, 0, 0, 20, 0, 0, 0, 0, 0, 20, 40, 20, 20, 20, 0, -20, -20, -20, -20, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, -20, 0, -20, -20, 0, 20, 40, 40, 40, 20, 20, 0, -20, -20, -20, -20, 0, 0, 0, 0, -20, -40, -40, -40, 0, 40, 40, 20, 20, 0, 0, -20, 0, 0, 0, -20, -20, -20, 0, -20, 20, 20, 20, 20, 0, -20, -20, -20, 0, -20, 0, 0, 0, -20, -20, -20, -20, 0, 0, 40, 40, 60, 60, 20, 0, 0, -20, -20, -20, 0, -20, 0, 0, 0, 0, 20, 0, 0, 0, -20, 0, 20, 20, 0, 0, 0, 0, -20, -20, -20, 0, 20, 40, 40, 40, 20, -20, -20, -60, -40, -60, -20, 0, 0, 20, 20, 0, 0, 20, 0, 0, 0, -20, 0, -20, 20, 0, 0, 0, -20, -20, 0, 0, 20, 20, 20, 40, 20, 20, -20, -40, -60, -40, -40, 0, 40, 20, 40, 20, 0, 0, -20, -20, -40, -20, -20, 0, 0, 20, 0, 20, 20, 0, 20, 0, -20, -20, -20, -20, 0, -20, 0, -20, 0, -20, -20, 0, 0, 0, 0, 20, 0, 0, 0, 0, -20, 20, 0, 20, 0, 0, 0, 0, 0, 20, 0, 0, -20, 0, -20, 0, 0, 20, 0, 0, 0, 0, 20, 0, 20, 0, 0, -20, -20, -20, -40, 0, 0, 0, 20, 20, 20, 0, 0, -20, -20, 0, 0, 0, 20, 0, 20, 0, -20, 0, 0, 0, 20, 40, 20, 0, -20, 0, -40, -20, -40, -20, 20, 0, 20, 40, 20, 40, 40, 40, 20, 40, 40, 20, 20, 20, 40, 20, 40, 20, 40, 20, 20, 0, 20, 20, 40, 40, 40, 40, 20, 0, -20, 0, 20, 20, 40, 60, 80, 60, 40, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, -20, 0, 0, 0, 0, -20, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20, 0, -20, 0, 40, 20, 20, 20, -40, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0]
data_2024 = {'altitude': altitude_data_2024, 'velocity': velocity_data_2024, 'acceleration': acceleration_data_2024}



# import pandas as pd
# def load_data_from_xlsx(file_path):
#     data_without_headers = pd.read_excel(file_path)
#     # get first column
#     time = data_without_headers.iloc[16:, 0]
#     altitude = data_without_headers.iloc[16:, 1]
#     velocity = data_without_headers.iloc[16:, 2]
#     # interpolate acceleration
#     acceleration = (velocity - velocity.shift(1)) / (time - time.shift(1))
#     new_data = pd.concat([time, altitude, velocity, acceleration], axis=1)
#     new_data.index -= 16
#     new_data.columns = ['time', 'altitude', 'velocity', 'acceleration']
#     new_data.loc[0, 'acceleration'] = 0.0
#     return new_data

class Simulator:
    def __init__(self, data, time_step=0.05, port='/dev/ttyUSB0'):
        if time_step/0.05 != int(time_step/0.05) or time_step == 0:
            raise ValueError('time_step must be a multiple of 0.05')
        self.time_step = time_step
        self.data = data
        self.index_step_size = int(time_step/0.05)
        self.current_index = 0

        try:
            self.arduino = serial.Serial(port, 115200, timeout=0)
            print(f"Arduino connected on port {port}!")
        except serial.serialutil.SerialException:
            raise serial.serialutil.SerialException(f"Could not find anything on the serial port {port}\n\n Make sure the arduino is plugged in, and that the \"port\" argument is the same one that you see in the top-left corner of the Arduino IDE")


    def tick(self):
        # update the arduino with the current data
        try:
            arduino_data = f"altitude:{self.data['altitude'][self.current_index]},velocity:{self.data['velocity'][self.current_index]},acceleration:{self.data['acceleration'][self.current_index]},"
            self.arduino.write(bytes(arduino_data, 'utf-8'))
        except KeyError:
            print('Simulation finished')
            return
        # get data sent back from arduino
        for _ in range(100):
            data = self.arduino.readline().decode('utf-8')
            if data == '':
                break
            print(data)

        self.current_index += self.index_step_size

    def run(self):
        # wait for arduino to boot/reset its program
        while self.arduino.readline().decode('utf-8') != '(simulation) Arduino is ready!\n':
            time.sleep(0.25)

        print('Arduino is ready! Launching simulation...\n\n\n')

        # begin simulation
        time.sleep(self.time_step)
        for i in range(len(self.data['altitude'])):
            start_time = time.time()
            self.tick()
            wait_time = self.time_step - (time.time() - start_time)
            while wait_time < 0:
                wait_time += self.time_step
                print("Warning: Python can't keep up with this tick speed! (tick took longer than time_step)")
            time.sleep(wait_time)

if __name__ == '__main__':
    # data = load_data_from_xlsx('/Path/To/Repo/Avionics-2025/strato1.xlsx')
    simulator = Simulator(data_2024, time_step=0.05)
    simulator.run()
